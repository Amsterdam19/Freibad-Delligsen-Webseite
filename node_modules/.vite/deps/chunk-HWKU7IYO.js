import {
  e
} from "./chunk-AMQVUKHH.js";
import {
  l,
  n
} from "./chunk-DFMJAHVM.js";

// node_modules/@swup/preload-plugin/dist/index.modern.js
function s() {
  return s = Object.assign ? Object.assign.bind() : function(e2) {
    for (var t = 1; t < arguments.length; t++) {
      var o = arguments[t];
      for (var s2 in o)
        Object.prototype.hasOwnProperty.call(o, s2) && (e2[s2] = o[s2]);
    }
    return e2;
  }, s.apply(this, arguments);
}
var r = class extends e {
  constructor(e2 = {}) {
    var t;
    super(), t = this, this.name = "SwupPreloadPlugin", this.requires = { swup: ">=4" }, this.defaults = { throttle: 5, preloadInitialPage: true }, this.options = void 0, this.preloadPromises = /* @__PURE__ */ new Map(), this.mouseEnterDelegate = void 0, this.touchStartDelegate = void 0, this.onPageLoad = (e3, t2, o) => {
      const { url: s2 } = e3.to;
      return this.preloadPromises.has(s2) ? this.preloadPromises.get(s2) : null == o ? void 0 : o(e3, t2);
    }, this.onMouseEnter = async function(e3) {
      if (e3.target !== e3.delegateTarget)
        return;
      if (!t.deviceSupportsHover())
        return;
      const o = e3.delegateTarget;
      o instanceof HTMLAnchorElement && (t.swup.hooks.callSync("link:hover", { el: o, event: e3 }), t.preloadLink(o));
    }, this.onTouchStart = (e3) => {
      if (this.deviceSupportsHover())
        return;
      const t2 = e3.delegateTarget;
      t2 instanceof HTMLAnchorElement && this.preloadLink(t2);
    }, this.preload = async function(e3) {
      const o = await t.swup.fetchPage(e3);
      return await t.swup.hooks.call("page:preload", { page: o }), o;
    }, this.preloadLinks = () => {
      document.querySelectorAll("a[data-swup-preload], [data-swup-preload-all] a").forEach((e3) => {
        var t2, o;
        this.swup.shouldIgnoreVisit(e3.href, { el: e3 }) || null == (t2 = (o = this.swup).preload) || t2.call(o, e3.href);
      });
    }, this.options = s({}, this.defaults, e2);
  }
  mount() {
    const e2 = this.swup;
    e2.options.cache ? (e2.hooks.create("page:preload"), e2.hooks.create("link:hover"), e2.preload = this.preload, e2.preloadLinks = this.preloadLinks, this.mouseEnterDelegate = e2.delegateEvent(e2.options.linkSelector, "mouseenter", this.onMouseEnter.bind(this), { capture: true }), this.touchStartDelegate = e2.delegateEvent(e2.options.linkSelector, "touchstart", this.onTouchStart.bind(this), { capture: true }), this.on("page:view", this.onPageView), this.replace("page:load", this.onPageLoad), this.preloadLinks(), this.options.preloadInitialPage && this.preload(n())) : console.warn("SwupPreloadPlugin: swup cache needs to be enabled for preloading");
  }
  unmount() {
    var e2, t;
    this.swup.preload = void 0, this.swup.preloadLinks = void 0, this.preloadPromises.clear(), null == (e2 = this.mouseEnterDelegate) || e2.destroy(), null == (t = this.touchStartDelegate) || t.destroy();
  }
  onPageView() {
    this.preloadLinks();
  }
  deviceSupportsHover() {
    return window.matchMedia("(hover: hover)").matches;
  }
  preloadLink(e2) {
    const { url: s2, href: r2 } = l.fromElement(e2);
    if (this.swup.shouldIgnoreVisit(r2, { el: e2 }))
      return;
    if (s2 === n())
      return;
    if (this.swup.cache.has(s2))
      return;
    if (this.preloadPromises.has(s2))
      return;
    if (this.preloadPromises.size >= this.options.throttle)
      return;
    const i = this.preload(s2);
    i.catch(() => {
    }).finally(() => {
      this.preloadPromises.delete(s2);
    }), this.preloadPromises.set(s2, i);
  }
};

export {
  r
};
//# sourceMappingURL=chunk-HWKU7IYO.js.map
