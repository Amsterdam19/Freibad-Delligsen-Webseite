import {
  e
} from "./chunk-AMQVUKHH.js";
import {
  __commonJS,
  __toESM
} from "./chunk-UXIASGQL.js";

// node_modules/on-demand-live-region/on-demand-live-region.js
var require_on_demand_live_region = __commonJS({
  "node_modules/on-demand-live-region/on-demand-live-region.js"(exports, module) {
    (function(global) {
      "use strict";
      function OnDemandLiveRegion(options) {
        options = options || {};
        this.settings = {
          level: "polite",
          parent: "body",
          idPrefix: "live-region-",
          delay: 0
        };
        for (var setting in options) {
          if (options.hasOwnProperty(setting)) {
            this.settings[setting] = options[setting];
          }
        }
        this.settings.parent = document.querySelector(this.settings.parent);
      }
      OnDemandLiveRegion.prototype.say = function(thingToSay, delay) {
        var oldRegion = this.settings.parent.querySelector('[id^="' + this.settings.idPrefix + '"]') || false;
        if (oldRegion) {
          this.settings.parent.removeChild(oldRegion);
        }
        delay = delay || this.settings.delay;
        this.currentRegion = document.createElement("span");
        this.currentRegion.id = this.settings.idPrefix + Math.floor(Math.random() * 1e4);
        var role = this.settings.level !== "assertive" ? "status" : "alert";
        this.currentRegion.setAttribute("aria-live", this.settings.level);
        this.currentRegion.setAttribute("role", role);
        this.currentRegion.setAttribute("style", "clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px");
        this.settings.parent.appendChild(this.currentRegion);
        window.setTimeout((function() {
          this.currentRegion.textContent = thingToSay;
        }).bind(this), delay);
        return this;
      };
      if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
        module.exports = OnDemandLiveRegion;
      } else if (typeof define === "function" && define.amd) {
        define("OnDemandLiveRegion", [], function() {
          return OnDemandLiveRegion;
        });
      } else if (typeof global === "object") {
        global.OnDemandLiveRegion = OnDemandLiveRegion;
      }
    })(exports);
  }
});

// node_modules/@swup/a11y-plugin/dist/index.modern.js
var import_on_demand_live_region = __toESM(require_on_demand_live_region());

// node_modules/focus-options-polyfill/index.js
(function() {
  if (typeof window === "undefined" || typeof document === "undefined" || typeof HTMLElement === "undefined") {
    return;
  }
  var supportsPreventScrollOption = false;
  try {
    var focusElem = document.createElement("div");
    focusElem.addEventListener(
      "focus",
      function(event) {
        event.preventDefault();
        event.stopPropagation();
      },
      true
    );
    focusElem.focus(
      Object.defineProperty({}, "preventScroll", {
        get: function() {
          if (navigator && typeof navigator.userAgent !== "undefined" && navigator.userAgent && navigator.userAgent.match(/Edge\/1[7-8]/)) {
            return supportsPreventScrollOption = false;
          }
          supportsPreventScrollOption = true;
        }
      })
    );
  } catch (e3) {
  }
  if (HTMLElement.prototype.nativeFocus === void 0 && !supportsPreventScrollOption) {
    HTMLElement.prototype.nativeFocus = HTMLElement.prototype.focus;
    var calcScrollableElements = function(element) {
      var parent = element.parentNode;
      var scrollableElements = [];
      var rootScrollingElement = document.scrollingElement || document.documentElement;
      while (parent && parent !== rootScrollingElement) {
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
          scrollableElements.push([
            parent,
            parent.scrollTop,
            parent.scrollLeft
          ]);
        }
        parent = parent.parentNode;
      }
      parent = rootScrollingElement;
      scrollableElements.push([parent, parent.scrollTop, parent.scrollLeft]);
      return scrollableElements;
    };
    var restoreScrollPosition = function(scrollableElements) {
      for (var i = 0; i < scrollableElements.length; i++) {
        scrollableElements[i][0].scrollTop = scrollableElements[i][1];
        scrollableElements[i][0].scrollLeft = scrollableElements[i][2];
      }
      scrollableElements = [];
    };
    var patchedFocus = function(args) {
      if (args && args.preventScroll) {
        var evScrollableElements = calcScrollableElements(this);
        if (typeof setTimeout === "function") {
          var thisElem = this;
          setTimeout(function() {
            thisElem.nativeFocus();
            restoreScrollPosition(evScrollableElements);
          }, 0);
        } else {
          this.nativeFocus();
          restoreScrollPosition(evScrollableElements);
        }
      } else {
        this.nativeFocus();
      }
    };
    HTMLElement.prototype.focus = patchedFocus;
  }
})();

// node_modules/@swup/a11y-plugin/dist/index.modern.js
function n() {
  return n = Object.assign ? Object.assign.bind() : function(t) {
    for (var e3 = 1; e3 < arguments.length; e3++) {
      var n2 = arguments[e3];
      for (var o2 in n2)
        Object.prototype.hasOwnProperty.call(n2, o2) && (t[o2] = n2[o2]);
    }
    return t;
  }, n.apply(this, arguments);
}
var o = class extends e {
  constructor(t = {}) {
    super(), this.name = "SwupA11yPlugin", this.requires = { swup: ">=4" }, this.defaults = { contentSelector: "main", headingSelector: "h1, h2, [role=heading]", announcementTemplate: "Navigated to: {title}", urlTemplate: "New page at {url}" }, this.options = void 0, this.liveRegion = void 0, this.options = n({}, this.defaults, t), this.liveRegion = new import_on_demand_live_region.default();
  }
  mount() {
    this.on("visit:start", this.markAsBusy), this.on("visit:end", this.unmarkAsBusy), this.on("content:replace", this.announceVisit);
  }
  markAsBusy() {
    document.documentElement.setAttribute("aria-busy", "true");
  }
  unmarkAsBusy() {
    document.documentElement.removeAttribute("aria-busy");
  }
  announceVisit() {
    requestAnimationFrame(() => {
      this.announcePageName(), this.focusPageContent();
    });
  }
  announcePageName() {
    const { contentSelector: t, headingSelector: e3, urlTemplate: n2, announcementTemplate: o2 } = this.options;
    let i = n2.replace("{url}", window.location.pathname);
    document.title && (i = document.title);
    const s = document.querySelector(t);
    if (s) {
      const t2 = s.querySelectorAll(e3);
      if (t2 && t2.length) {
        const [e4] = t2;
        i = e4.getAttribute("aria-label") || e4.textContent || i;
      }
    }
    const r = o2.replace("{title}", i.trim());
    this.liveRegion.say(r);
  }
  focusPageContent() {
    const t = document.querySelector(this.options.contentSelector);
    t && (t.setAttribute("tabindex", "-1"), t.focus({ preventScroll: true }));
  }
};

export {
  o
};
//# sourceMappingURL=chunk-ZMWHT353.js.map
