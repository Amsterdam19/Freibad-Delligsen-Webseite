{
  "version": 3,
  "sources": ["../../@swup/preload-plugin/src/index.ts"],
  "sourcesContent": ["import Plugin from '@swup/plugin';\nimport { getCurrentUrl, Handler, Location } from 'swup';\nimport type { DelegateEvent, DelegateEventHandler, DelegateEventUnsubscribe, PageData } from 'swup';\n\ndeclare module 'swup' {\n\texport interface Swup {\n\t\tpreload?: (url: string) => Promise<PageData>;\n\t\tpreloadLinks?: () => void;\n\t}\n\texport interface HookDefinitions {\n\t\t'link:hover': { el: HTMLAnchorElement; event: DelegateEvent };\n\t\t'page:preload': { page: PageData };\n\t}\n}\n\nexport type PluginOptions = {\n\tthrottle: number;\n\tpreloadInitialPage: boolean;\n};\n\nexport default class SwupPreloadPlugin extends Plugin {\n\tname = 'SwupPreloadPlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults: PluginOptions = {\n\t\tthrottle: 5,\n\t\tpreloadInitialPage: true\n\t};\n\n\toptions: PluginOptions;\n\n\tpreloadPromises = new Map();\n\n\tmouseEnterDelegate?: DelegateEventUnsubscribe;\n\ttouchStartDelegate?: DelegateEventUnsubscribe;\n\n\tconstructor(options: Partial<PluginOptions> = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t}\n\n\tmount() {\n\t\tconst swup = this.swup;\n\n\t\tif (!swup.options.cache) {\n\t\t\tconsole.warn('SwupPreloadPlugin: swup cache needs to be enabled for preloading');\n\t\t\treturn;\n\t\t}\n\n\t\tswup.hooks.create('page:preload');\n\t\tswup.hooks.create('link:hover');\n\n\t\tswup.preload = this.preload;\n\t\tswup.preloadLinks = this.preloadLinks;\n\n\t\t// register mouseenter handler\n\t\tthis.mouseEnterDelegate = swup.delegateEvent(\n\t\t\tswup.options.linkSelector,\n\t\t\t'mouseenter',\n\t\t\tthis.onMouseEnter.bind(this),\n\t\t\t{ capture: true }\n\t\t);\n\n\t\t// register touchstart handler\n\t\tthis.touchStartDelegate = swup.delegateEvent(\n\t\t\tswup.options.linkSelector,\n\t\t\t'touchstart',\n\t\t\tthis.onTouchStart.bind(this),\n\t\t\t{ capture: true }\n\t\t);\n\n\t\t// preload links with [data-swup-preload] attr after page views\n\t\tthis.on('page:view', this.onPageView);\n\n\t\t// inject custom promise whenever a page is loaded\n\t\tthis.replace('page:load', this.onPageLoad);\n\n\t\t// initial preload of links with [data-swup-preload] attr\n\t\tthis.preloadLinks();\n\n\t\t// cache unmodified dom of initial/current page\n\t\tif (this.options.preloadInitialPage) {\n\t\t\tthis.preload(getCurrentUrl());\n\t\t}\n\t}\n\n\tunmount() {\n\t\tthis.swup.preload = undefined;\n\t\tthis.swup.preloadLinks = undefined;\n\n\t\tthis.preloadPromises.clear();\n\n\t\tthis.mouseEnterDelegate?.destroy();\n\t\tthis.touchStartDelegate?.destroy();\n\t}\n\n\tonPageView() {\n\t\tthis.preloadLinks();\n\t}\n\n\tonPageLoad: Handler<'page:load'> = (visit, args, defaultHandler) => {\n\t\tconst { url } = visit.to;\n\t\tif (this.preloadPromises.has(url)) {\n\t\t\treturn this.preloadPromises.get(url);\n\t\t}\n\t\treturn defaultHandler?.(visit, args);\n\t};\n\n\tdeviceSupportsHover() {\n\t\treturn window.matchMedia('(hover: hover)').matches;\n\t}\n\n\tonMouseEnter: DelegateEventHandler = async (event) => {\n\t\t// Make sure mouseenter is only fired once even on links with nested html\n\t\tif (event.target !== event.delegateTarget) return;\n\t\t// Return early on devices that don't support hover\n\t\tif (!this.deviceSupportsHover()) return;\n\n\t\tconst el = event.delegateTarget;\n\t\tif (!(el instanceof HTMLAnchorElement)) return;\n\n\t\tthis.swup.hooks.callSync('link:hover', { el, event });\n\t\tthis.preloadLink(el);\n\t};\n\n\tonTouchStart: DelegateEventHandler = (event) => {\n\t\t// Return early on devices that support hover\n\t\tif (this.deviceSupportsHover()) return;\n\n\t\tconst el = event.delegateTarget;\n\t\tif (!(el instanceof HTMLAnchorElement)) return;\n\n\t\tthis.preloadLink(el);\n\t};\n\n\tpreloadLink(el: HTMLAnchorElement) {\n\t\tconst { url, href } = Location.fromElement(el);\n\n\t\t// Bail early if the visit should be ignored by swup\n\t\tif (this.swup.shouldIgnoreVisit(href, { el })) return;\n\n\t\t// Bail early if the link points to the current page\n\t\tif (url === getCurrentUrl()) return;\n\n\t\t// Bail early if the page is already in the cache\n\t\tif (this.swup.cache.has(url)) return;\n\n\t\t// Bail early if there is already a preload running\n\t\tif (this.preloadPromises.has(url)) return;\n\n\t\t// Bail early if there are more then the maximum concurrent preloads running\n\t\tif (this.preloadPromises.size >= this.options.throttle) return;\n\n\t\tconst preloadPromise = this.preload(url);\n\t\tpreloadPromise\n\t\t\t.catch(() => {})\n\t\t\t.finally(() => {\n\t\t\t\tthis.preloadPromises.delete(url);\n\t\t\t});\n\t\tthis.preloadPromises.set(url, preloadPromise);\n\t}\n\n\tpreload = async (url: string) => {\n\t\tconst page = await this.swup.fetchPage(url);\n\t\tawait this.swup.hooks.call('page:preload', { page });\n\t\treturn page;\n\t};\n\n\tpreloadLinks = (): void => {\n\t\tdocument\n\t\t\t.querySelectorAll<HTMLAnchorElement>('a[data-swup-preload], [data-swup-preload-all] a')\n\t\t\t.forEach((el) => {\n\t\t\t\tif (this.swup.shouldIgnoreVisit(el.href, { el })) return;\n\t\t\t\tthis.swup.preload?.(el.href);\n\t\t\t});\n\t};\n}\n"],
  "mappings": "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",
  "names": ["SwupPreloadPlugin", "Plugin", "constructor", "options", "_this", "super", "this", "name", "requires", "swup", "defaults", "throttle", "preloadInitialPage", "preloadPromises", "Map", "mouseEnterDelegate", "touchStartDelegate", "onPageLoad", "visit", "args", "defaultHandler", "url", "to", "has", "get", "onMouseEnter", "async", "event", "target", "delegateTarget", "deviceSupportsHover", "el", "HTMLAnchorElement", "hooks", "callSync", "preloadLink", "onTouchStart", "preload", "page", "fetchPage", "call", "preloadLinks", "document", "querySelectorAll", "forEach", "_this$swup$preload", "_this$swup", "shouldIgnoreVisit", "href", "_extends", "mount", "cache", "create", "delegateEvent", "linkSelector", "bind", "capture", "on", "onPageView", "replace", "getCurrentUrl", "console", "warn", "unmount", "_this$mouseEnterDeleg", "_this$touchStartDeleg", "clear", "destroy", "window", "matchMedia", "matches", "Location", "fromElement", "size", "preloadPromise", "catch", "finally", "delete", "set"]
}
