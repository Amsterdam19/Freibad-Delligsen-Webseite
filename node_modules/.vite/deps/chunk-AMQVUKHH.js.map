{
  "version": 3,
  "sources": ["../../@swup/plugin/src/versionSatisfies.ts", "../../@swup/plugin/src/index.ts", "../../@swup/plugin/src/pluginRequirements.ts"],
  "sourcesContent": ["type Comparator = '>' | '>=' | '<' | '<=';\n\n// Fill versions to exactly 3 decimals\nexport const normalizeVersion = (version: string): string => {\n\treturn String(version)\n\t\t.split('.')\n\t\t.map(segment => String(parseInt(segment || '0', 10)))\n\t\t.concat(['0', '0'])\n\t\t.slice(0, 3)\n\t\t.join('.');\n};\n\n// Numerically compare version strings after normalizing them\nexport const compareVersion = (a: string, b: string): number => {\n\ta = normalizeVersion(a);\n\tb = normalizeVersion(b);\n\treturn a.localeCompare(b, undefined, { numeric: true });\n};\n\n// Apply a comparator (equals, greater-than, etc) by its symbol to a sort comparison\nconst applyComparator = (comparisonResult: number, comparator: Comparator) => {\n\tconst comparators = {\n\t\t'': (r: number) => r === 0,\n\t\t'>': (r: number) => r > 0,\n\t\t'>=': (r: number) => r >= 0,\n\t\t'<': (r: number) => r < 0,\n\t\t'<=': (r: number) => r <= 0\n\t};\n\tconst comparatorFn = comparators[comparator] || comparators[''];\n\treturn comparatorFn(comparisonResult);\n};\n\n/**\n * Check if a version satisfies all given version requirements\n *\n * versionSatisfies('2.1.0', ['>=2', '<4']) // true\n * versionSatisfies('2.1.0', ['5']) // false\n *\n * @param {string} installed Installed version\n * @param {Array.<string>} requirements Array of requirements that must be satisfied\n * @returns boolean\n */\nexport const versionSatisfies = (installed: string, requirements: string[]) => {\n\treturn requirements.every((required) => {\n\t\tconst [, comparator, version] = required.match(/^([\\D]+)?(.*)$/) || [];\n\t\tconst comparisonResult = compareVersion(installed, version);\n\t\treturn applyComparator(comparisonResult, (comparator as Comparator) || '>=');\n\t});\n};\n", "import type Swup from 'swup';\nimport type { Plugin, HookName, HookOptions, HookUnregister, Handler } from 'swup';\nimport { checkDependencyVersion } from './pluginRequirements.js';\n\nfunction isBound(func: Function) {\n\treturn func.name.startsWith('bound ') && !func.hasOwnProperty('prototype');\n}\n\nexport default abstract class SwupPlugin implements Plugin {\n\t/** Name of the plugin */\n\tabstract name: string;\n\n\t/** Identify as a swup plugin */\n\tisSwupPlugin: true = true;\n\n\t// Swup instance, assigned by swup itself\n\tswup: Swup;\n\t/** Version of this plugin. Currently not in use, defined here for backward compatiblity. */\n\tversion?: string;\n\n\t/** Version requirements of this plugin. Example: `{ swup: '>=4' }` */\n\trequires?: Record<string, string | string[]> = {};\n\n\t// List of hook handlers to unregister on unmount\n\tprivate handlersToUnregister: HookUnregister[] = [];\n\n\t/** Run on mount */\n\tmount() {\n\t\t// this is mount method rewritten by class extending\n\t\t// and is executed when swup is enabled with plugin\n\t}\n\n\t/** Run on unmount */\n\tunmount() {\n\t\t// this is unmount method rewritten by class extending\n\t\t// and is executed when swup with plugin is disabled\n\n\t\t// Unsubscribe all registered hook handlers\n\t\tthis.handlersToUnregister.forEach((unregister) => unregister());\n\t\tthis.handlersToUnregister = [];\n\t}\n\n\t_beforeMount(): void {\n\t\tif (!this.name) {\n\t\t\tthrow new Error('You must define a name of plugin when creating a class.');\n\t\t}\n\t}\n\n\t_afterUnmount(): void {\n\t\t// here for any future hidden auto-cleanup\n\t}\n\n\t_checkRequirements(): boolean {\n\t\tif (typeof this.requires !== 'object') {\n\t\t\treturn true;\n\t\t}\n\n\t\tObject.entries(this.requires).forEach(([dependency, versions]) => {\n\t\t\tversions = Array.isArray(versions) ? versions : [versions];\n\t\t\tif (!checkDependencyVersion(dependency, versions, this.swup)) {\n\t\t\t\tconst requirement = `${dependency} ${versions.join(', ')}`;\n\t\t\t\tthrow new Error(`Plugin version mismatch: ${this.name} requires ${requirement}`);\n\t\t\t}\n\t\t});\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Register a new hook handler.\n\t *\n\t * On plugin unmount, the handler will automatically be unregistered.\n\t * The handler function is lexically bound to the plugin instance for convenience.\n\t * @see swup.hooks.on\n\t */\n\tprotected on<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\thandler = !isBound(handler) ? handler.bind(this) : handler;\n\t\tconst unregister = this.swup.hooks.on(hook, handler, options);\n\t\tthis.handlersToUnregister.push(unregister);\n\t\treturn unregister;\n\t}\n\n\tprotected once<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, once: true });\n\t}\n\n\tprotected before<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, before: true });\n\t}\n\n\tprotected replace<T extends HookName>(hook: T, handler: Handler<T>, options: HookOptions = {}): HookUnregister {\n\t\treturn this.on(hook, handler, { ...options, replace: true });\n\t}\n\n\tprotected off<T extends HookName>(hook: T, handler?: Handler<T>): void {\n\t\treturn this.swup.hooks.off(hook, handler!);\n\t}\n}\n", "import type Swup from 'swup';\n\nimport { versionSatisfies } from './versionSatisfies.js';\n\nfunction getInstalledDependencyVersion(dependency: string, swup: Swup): string {\n\tif (dependency === 'swup') {\n\t\treturn swup.version ?? '';\n\t} else {\n\t\t// Circular type dependency?\n\t\t// findPlugin returns swup's Plugin type which is not up-to-date\n\t\t// with the actual Plugin type from index.ts\n\t\tconst plugin = swup.findPlugin(dependency);\n\t\treturn plugin?.version ?? '';\n\t}\n}\n\nexport function checkDependencyVersion(\n\tdependency: string,\n\trequirements: string[],\n\tswup: Swup\n): boolean {\n\tconst version = getInstalledDependencyVersion(dependency, swup);\n\tif (version) {\n\t\treturn versionSatisfies(version, requirements);\n\t} else {\n\t\treturn false;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["normalizeVersion", "version", "String", "split", "map", "segment", "parseInt", "concat", "slice", "join", "SwupPlugin", "isSwupPlugin", "this", "swup", "requires", "handlersToUnregister", "mount", "unmount", "forEach", "unregister", "_beforeMount", "name", "Error", "_afterUnmount", "_checkRequirements", "Object", "entries", "dependency", "versions", "checkDependencyVersion", "requirements", "_plugin$version", "e", "findPlugin", "plugin", "installed", "every", "required", "comparator", "match", "a", "b", "comparisonResult", "comparators", "r", "localeCompare", "numeric", "Array", "isArray", "requirement", "on", "hook", "handler", "options", "func", "startsWith", "hasOwnProperty", "bind", "hooks", "push", "once", "_extends", "before", "replace", "off"]
}
