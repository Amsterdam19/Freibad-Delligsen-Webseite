import{forceReflow as t}from"swup";import i from"@swup/plugin";function n(){return n=Object.assign?Object.assign.bind():function(t){for(var i=1;i<arguments.length;i++){var n=arguments[i];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},n.apply(this,arguments)}class s extends i{constructor(i={}){super(),this.name="SwupParallelPlugin",this.requires={swup:">=4"},this.defaults={containers:[]},this.options=void 0,this.originalContainers=null,this.previousContainers=[],this.nextContainers=[],this.startVisit=t=>{this.originalContainers=null,this.visitHasPotentialParallelAnimation(t)&&(t.animation.wait=!0,t.animation.parallel=!0)},this.skipOutAnimation=(t,i)=>{this.isParallelVisit(t)&&(i.skip=!0)},this.insertContainers=(i,{page:n})=>{if(!this.isParallelVisit(i))return;const s=this.getContainersForVisit(i,n),e=s.map(({selector:t})=>t);s.forEach(({previous:i,next:n})=>{this.previousContainers.push(i),this.nextContainers.push(n),i.setAttribute("aria-hidden","true"),i.before(n),n.classList.add("is-next-container"),t(n),i.classList.add("is-previous-container"),n.classList.remove("is-next-container")}),this.originalContainers=i.containers,i.containers=i.containers.filter(t=>!e.includes(t))},this.resetContainers=t=>{this.originalContainers&&(t.containers=this.originalContainers)},this.cleanupContainers=()=>{this.previousContainers.forEach(t=>t.remove()),this.nextContainers.forEach(t=>t.classList.remove("is-next-container")),this.previousContainers=[],this.nextContainers=[]},this.options=n({},this.defaults,i)}mount(){this.options.containers.length||(this.options.containers=this.swup.options.containers),this.on("visit:start",this.startVisit,{priority:1}),this.before("animation:out:await",this.skipOutAnimation,{priority:1}),this.before("content:replace",this.insertContainers,{priority:1}),this.on("content:replace",this.resetContainers),this.on("visit:end",this.cleanupContainers)}getContainersForVisit(t,{html:i}){const{containers:n}=this.options,s=n.filter(i=>t.containers.includes(i));if(!s.length)return console.warn("No parallel containers found in list of replaced containers"),[];const e=(new DOMParser).parseFromString(i,"text/html");return s.reduce((t,i)=>{const n=document.querySelector(i),s=e.querySelector(i);return n&&s?[...t,{selector:i,previous:n,next:s}]:t},[])}isParallelVisit(t){return t.animation.animate&&t.animation.parallel}markVisitAsParallelAnimation(t){t.animation.wait=!0,t.animation.parallel=!0}visitHasPotentialParallelAnimation(t){return t.animation.animate&&!1!==t.animation.parallel&&this.visitHasParallelContainers(t)}visitHasParallelContainers(t){return this.options.containers.some(i=>{const n=document.querySelector(i);return null==n?void 0:n.matches(t.containers.join(","))})}}export{s as default};
//# sourceMappingURL=index.modern.js.map
