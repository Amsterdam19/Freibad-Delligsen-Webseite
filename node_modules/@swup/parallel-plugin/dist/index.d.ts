import type { Handler, Visit } from 'swup';
import Plugin from '@swup/plugin';
declare module 'swup' {
    interface VisitAnimation {
        /** Parallel visit: run in and out animation at the same time */
        parallel?: boolean;
    }
}
type PluginOptions = {
    containers: string[];
};
type ContainerSet = {
    selector: string;
    previous: HTMLElement;
    next: HTMLElement;
};
export default class SwupParallelPlugin extends Plugin {
    name: string;
    requires: {
        swup: string;
    };
    defaults: PluginOptions;
    options: PluginOptions;
    originalContainers: string[] | null;
    previousContainers: Element[];
    nextContainers: Element[];
    constructor(options?: Partial<PluginOptions>);
    mount(): void;
    startVisit: Handler<'visit:start'>;
    skipOutAnimation: Handler<'animation:out:await'>;
    insertContainers: Handler<'content:replace'>;
    resetContainers: Handler<'content:replace'>;
    cleanupContainers: () => void;
    getContainersForVisit(visit: Visit, { html }: {
        html: string;
    }): ContainerSet[];
    isParallelVisit(visit: Visit): boolean | undefined;
    markVisitAsParallelAnimation(visit: Visit): void;
    visitHasPotentialParallelAnimation(visit: Visit): boolean;
    visitHasParallelContainers(visit: Visit): boolean;
}
export {};
