{"version":3,"file":"index.module.js","sources":["../src/index.js"],"sourcesContent":["import Plugin from '@swup/plugin';\nimport { classify, getCurrentUrl, matchPath, updateHistoryRecord } from 'swup';\n\nexport default class SwupRouteNamePlugin extends Plugin {\n\tname = 'SwupRouteNamePlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults = {\n\t\troutes: [],\n\t\tunknownRoute: 'unknown',\n\t\tmatchOptions: {},\n\t\tpaths: false\n\t};\n\n\tconstructor(options = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t\tthis.routes = this.compileRoutePatterns();\n\t}\n\n\tmount() {\n\t\t// Save route to current history record\n\t\tthis.swup.visit.to.route = this.getRouteName(getCurrentUrl());\n\t\tthis.updateHistory(this.swup.visit);\n\n\t\tthis.before('visit:start', this.addRouteKey);\n\t\tthis.on('animation:out:start', this.addPathClasses);\n\t\tthis.on('animation:out:start', this.addRouteClasses);\n\t\tthis.on('content:replace', this.updateHistory);\n\t\tthis.on('animation:in:end', this.removeClasses);\n\t}\n\n\t// Compile route patterns to match functions and valid classnames\n\tcompileRoutePatterns() {\n\t\treturn this.options.routes.map((route) => {\n\t\t\tconst name = this.sanitizeRouteName(route.name);\n\t\t\tconst matches = matchPath(route.path, this.options.matchOptions);\n\t\t\treturn { ...route, name, matches };\n\t\t});\n\t}\n\n\tsanitizeRouteName(name) {\n\t\treturn name.replace(/[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~\\s]/g, '');\n\t}\n\n\t// Get route name for any path\n\tgetRouteName(path) {\n\t\tconst { name } = this.routes.find((route) => route.matches(path)) || {};\n\t\treturn name || null;\n\t}\n\n\t// Get path name for any path\n\tgetPathName(path) {\n\t\treturn classify(path) || 'homepage';\n\t}\n\n\t// Add a `route` key to the visit object's `from` and `to` properties\n\taddRouteKey(visit) {\n\t\tif (!this.options.routes.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tvisit.from.route = this.getRouteName(visit.from.url);\n\t\tvisit.to.route = this.getRouteName(visit.to.url);\n\n\t\tthis.swup.log(\n\t\t\t`Route: '${visit.from.route || unknown || '(unknown)'}'` +\n\t\t\t\t` to '${visit.to.route || unknown || '(unknown)'}'`\n\t\t);\n\t}\n\n\t// Add `from-route-*` and `to-route-*` classnames to html tag\n\taddRouteClasses(visit) {\n\t\tif (!this.options.routes.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst from = visit.from.route;\n\t\tconst to = visit.to.route;\n\t\tconst unknown = this.options.unknownRoute;\n\n\t\tif (from || unknown) {\n\t\t\tdocument.documentElement.classList.add(`from-route-${from || unknown}`);\n\t\t}\n\t\tif (to || unknown) {\n\t\t\tdocument.documentElement.classList.add(`to-route-${to || unknown}`);\n\t\t}\n\t\tif (from && from === to) {\n\t\t\tdocument.documentElement.classList.add('to-same-route');\n\t\t}\n\t}\n\n\t// Add `from-*` and `to-*` classnames for slugified path\n\taddPathClasses(visit) {\n\t\tif (!this.options.paths) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst from = this.getPathName(visit.from.url);\n\t\tconst to = this.getPathName(visit.to.url);\n\n\t\tdocument.documentElement.classList.add(`from-${from}`);\n\t\tdocument.documentElement.classList.add(`to-${to}`);\n\t}\n\n\t// Remove `from-*` and `from-route-*` classnames from html tag\n\t// Note: swup removes `to-*` classnames on its own already\n\tremoveClasses = () => {\n\t\tconst htmlClasses = document.documentElement.className.split(' ');\n\t\tconst removeClasses = htmlClasses.filter((classItem) => classItem.startsWith('from-'));\n\t\tdocument.documentElement.classList.remove(...removeClasses);\n\t}\n\n\tupdateHistory(visit) {\n\t\tupdateHistoryRecord(undefined, { route: visit.to.route });\n\t}\n}\n"],"names":["SwupRouteNamePlugin","constructor","options","super","this","name","requires","swup","defaults","routes","unknownRoute","matchOptions","paths","removeClasses","document","documentElement","className","split","filter","classItem","startsWith","classList","remove","compileRoutePatterns","mount","visit","to","route","getRouteName","getCurrentUrl","updateHistory","before","addRouteKey","on","addPathClasses","addRouteClasses","map","sanitizeRouteName","matches","matchPath","path","replace","find","getPathName","length","from","url","log","unknown","add","updateHistoryRecord","undefined"],"mappings":"uHAGe,MAAyBA,YAYvCC,YAAYC,QAAAA,IAAAA,IAAAA,EAAU,CAAE,GACvBC,QAAQC,KAZTC,KAAO,sBAAqBD,KAE5BE,SAAW,CAAEC,KAAM,YAEnBC,SAAW,CACVC,OAAQ,GACRC,aAAc,UACdC,aAAc,CAAA,EACdC,OAAO,GAgGRC,KAAAA,cAAgB,KACf,MACMA,EADcC,SAASC,gBAAgBC,UAAUC,MAAM,KAC3BC,OAAQC,GAAcA,EAAUC,WAAW,UAC7EN,SAASC,gBAAgBM,UAAUC,UAAUT,EAC9C,EA/FCT,KAAKF,QAAU,IAAKE,KAAKI,YAAaN,GACtCE,KAAKK,OAASL,KAAKmB,sBACpB,CAEAC,QAECpB,KAAKG,KAAKkB,MAAMC,GAAGC,MAAQvB,KAAKwB,aAAaC,KAC7CzB,KAAK0B,cAAc1B,KAAKG,KAAKkB,OAE7BrB,KAAK2B,OAAO,cAAe3B,KAAK4B,aAChC5B,KAAK6B,GAAG,sBAAuB7B,KAAK8B,gBACpC9B,KAAK6B,GAAG,sBAAuB7B,KAAK+B,iBACpC/B,KAAK6B,GAAG,kBAAmB7B,KAAK0B,eAChC1B,KAAK6B,GAAG,mBAAoB7B,KAAKS,cAClC,CAGAU,uBACC,OAAOnB,KAAKF,QAAQO,OAAO2B,IAAKT,IAC/B,QAAavB,KAAKiC,kBAAkBV,EAAMtB,MACpCiC,EAAUC,EAAUZ,EAAMa,KAAMpC,KAAKF,QAAQS,cACnD,MAAO,IAAKgB,EAAOtB,OAAMiC,UAAQ,EAEnC,CAEAD,kBAAkBhC,GACjB,SAAYoC,QAAQ,wCAAyC,GAC9D,CAGAb,aAAaY,GACZ,MAAMnC,KAAEA,GAASD,KAAKK,OAAOiC,KAAMf,GAAUA,EAAMW,QAAQE,KAAU,CAAA,EACrE,UAAe,IAChB,CAGAG,YAAYH,GACX,SAAgBA,IAAS,UAC1B,CAGAR,YAAYP,GACNrB,KAAKF,QAAQO,OAAOmC,SAIzBnB,EAAMoB,KAAKlB,MAAQvB,KAAKwB,aAAaH,EAAMoB,KAAKC,KAChDrB,EAAMC,GAAGC,MAAQvB,KAAKwB,aAAaH,EAAMC,GAAGoB,KAE5C1C,KAAKG,KAAKwC,IACR,WAAUtB,EAAMoB,KAAKlB,OAASqB,SAAW,oBACjCvB,EAAMC,GAAGC,OAASqB,SAAW,gBAExC,CAGAb,gBAAgBV,GACf,IAAKrB,KAAKF,QAAQO,OAAOmC,OACxB,OAGD,MAAUC,EAAGpB,EAAMoB,KAAKlB,QACbF,EAAMC,GAAGC,MACdqB,EAAU5C,KAAKF,QAAQQ,cAEzBmC,GAAQG,IACXlC,SAASC,gBAAgBM,UAAU4B,IAAK,cAAaJ,GAAQG,MAE1DtB,GAAMsB,IACTlC,SAASC,gBAAgBM,UAAU4B,IAAK,YAAWvB,GAAMsB,KAEtDH,GAAQA,IAASnB,GACpBZ,SAASC,gBAAgBM,UAAU4B,IAAI,gBAEzC,CAGAf,eAAeT,GACd,IAAKrB,KAAKF,QAAQU,MACjB,OAGD,MAAMiC,EAAOzC,KAAKuC,YAAYlB,EAAMoB,KAAKC,KACjCpB,EAAGtB,KAAKuC,YAAYlB,EAAMC,GAAGoB,KAErChC,SAASC,gBAAgBM,UAAU4B,IAAK,QAAOJ,KAC/C/B,SAASC,gBAAgBM,UAAU4B,IAAK,MAAKvB,IAC9C,CAUAI,cAAcL,GACbyB,OAAoBC,EAAW,CAAExB,MAAOF,EAAMC,GAAGC,OAClD"}