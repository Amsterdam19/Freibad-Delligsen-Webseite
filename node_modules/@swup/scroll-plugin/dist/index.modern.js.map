{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import Plugin from '@swup/plugin';\nimport { getCurrentUrl, queryAll } from 'swup';\nimport Scrl from 'scrl';\n\n/**\n * Scroll Plugin\n * @extends Plugin\n */\nexport default class SwupScrollPlugin extends Plugin {\n\tname = 'SwupScrollPlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults = {\n\t\tdoScrollingRightAway: false,\n\t\tanimateScroll: {\n\t\t\tbetweenPages: true,\n\t\t\tsamePageWithHash: true,\n\t\t\tsamePage: true\n\t\t},\n\t\tscrollFriction: 0.3,\n\t\tscrollAcceleration: 0.04,\n\t\tgetAnchorElement: null,\n\t\toffset: 0,\n\t\tscrollContainers: `[data-swup-scroll-container]`,\n\t\tshouldResetScrollPosition: (link) => true\n\t};\n\n\tconstructor(options = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t}\n\n\tmount() {\n\t\tconst swup = this.swup;\n\n\t\tswup.hooks.create('scroll:start');\n\t\tswup.hooks.create('scroll:end');\n\n\t\t// Initialize Scrl lib for smooth animations\n\t\tthis.scrl = new Scrl({\n\t\t\tonStart: () => swup.hooks.callSync('scroll:start'),\n\t\t\tonEnd: () => swup.hooks.callSync('scroll:end'),\n\t\t\tonCancel: () => swup.hooks.callSync('scroll:end'),\n\t\t\tfriction: this.options.scrollFriction,\n\t\t\tacceleration: this.options.scrollAcceleration\n\t\t});\n\n\t\t// Add scrollTo method to swup and animate based on current animateScroll option\n\t\tswup.scrollTo = (offset, animate = true) => {\n\t\t\tif (animate) {\n\t\t\t\tthis.scrl.scrollTo(offset);\n\t\t\t} else {\n\t\t\t\tswup.hooks.callSync('scroll:start');\n\t\t\t\twindow.scrollTo(0, offset);\n\t\t\t\tswup.hooks.callSync('scroll:end');\n\t\t\t}\n\t\t};\n\n\t\t// This object will hold all scroll positions\n\t\tthis.scrollPositionsStore = {};\n\t\t// this URL helps with storing the current scroll positions on `willReplaceContent`\n\t\tthis.currentCacheKey = this.getCurrentCacheKey();\n\n\t\t// disable browser scroll control on popstates when\n\t\t// animateHistoryBrowsing option is enabled in swup.\n\t\t// Cache the previous setting to be able to properly restore it on unmount\n\t\tthis.previousScrollRestoration = window.history.scrollRestoration;\n\t\tif (swup.options.animateHistoryBrowsing) {\n\t\t\twindow.history.scrollRestoration = 'manual';\n\t\t}\n\n\t\t// reset scroll positions when a visit starts\n\t\tthis.on('visit:start', this.maybeResetScrollPositions);\n\n\t\t// scroll to the top of the page when a visit starts, before replacing the content\n\t\tthis.on('visit:start', this.onVisitStart);\n\n\t\t// store the current scroll positions before replacing the content\n\t\tthis.before('content:replace', this.onBeforeReplaceContent);\n\n\t\t// scroll to the top or target element after replacing the content\n\t\tthis.replace('content:scroll', this.onScrollToContent);\n\n\t\t// scroll to the top of the page\n\t\tthis.replace('scroll:top', this.handleScrollToTop);\n\n\t\t// scroll to an anchor on the same page\n\t\tthis.replace('scroll:anchor', this.handleScrollToAnchor);\n\t}\n\n\t/**\n\t * Runs when the plugin is unmounted\n\t */\n\tunmount() {\n\t\tsuper.unmount();\n\n\t\twindow.history.scrollRestoration = this.previousScrollRestoration;\n\t\tdelete this.swup.scrollTo;\n\t\tdelete this.scrl;\n\t}\n\n\t/**\n\t * Detects if a scroll should be animated, based on context\n\t * @param {string} context\n\t * @returns {boolean}\n\t */\n\tshouldAnimate(context) {\n\t\tif (typeof this.options.animateScroll === 'boolean') {\n\t\t\treturn this.options.animateScroll;\n\t\t}\n\t\treturn this.options.animateScroll[context];\n\t}\n\n\t/**\n\t * Get an element based on anchor\n\t * @param {string} hash\n\t * @returns {mixed}\n\t */\n\tgetAnchorElement = (hash = '') => {\n\t\t// Look for a custom function provided via the plugin options\n\t\tif (typeof this.options.getAnchorElement === 'function') {\n\t\t\treturn this.options.getAnchorElement(hash);\n\t\t} else {\n\t\t\treturn this.swup.getAnchorElement(hash);\n\t\t}\n\t};\n\n\t/**\n\t * Get the offset for a scroll\n\t * @param {(HtmlELement|null)} element\n\t * @returns {number}\n\t */\n\tgetOffset = (element = null) => {\n\t\t// If options.offset is a function, apply and return it\n\t\tif (typeof this.options.offset === 'function') {\n\t\t\treturn parseInt(this.options.offset(element), 10);\n\t\t}\n\t\t// Otherwise, return the sanitized offset\n\t\treturn parseInt(this.options.offset, 10);\n\t};\n\n\t/**\n\t * Scroll to top on `scroll:top` hook\n\t */\n\thandleScrollToTop = () => {\n\t\tthis.swup.scrollTo(0, this.shouldAnimate('samePage'));\n\t\treturn true;\n\t};\n\n\t/**\n\t * Scroll to anchor on `scroll:anchor` hook\n\t */\n\thandleScrollToAnchor = (visit, { hash }) => {\n\t\treturn this.maybeScrollToAnchor(hash, this.shouldAnimate('samePageWithHash'));\n\t};\n\n\t/**\n\t * Attempts to scroll to an anchor\n\t * @param {string} hash\n\t * @param {boolean} animate\n\t * @returns {boolean}\n\t */\n\tmaybeScrollToAnchor(hash, animate = false) {\n\t\tif (!hash) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst element = this.getAnchorElement(hash);\n\t\tif (!element) {\n\t\t\tconsole.warn(`Anchor target ${hash} not found`);\n\t\t\treturn false;\n\t\t}\n\t\tif (!(element instanceof Element)) {\n\t\t\tconsole.warn(`Anchor target ${hash} is not a DOM node`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst { top: elementTop } = element.getBoundingClientRect();\n\t\tconst top = elementTop + window.scrollY - this.getOffset(element);\n\t\tthis.swup.scrollTo(top, animate);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check whether to scroll in `visit:start` hook\n\t */\n\tonVisitStart = (visit) => {\n\t\tif (this.options.doScrollingRightAway && !visit.scroll.target) {\n\t\t\tvisit.scroll.scrolledToContent = true;\n\t\t\tthis.doScrollingBetweenPages(visit);\n\t\t}\n\t};\n\n\t/**\n\t * Check whether to scroll in `content:scroll` hook\n\t */\n\tonScrollToContent = (visit) => {\n\t\tif (!visit.scroll.scrolledToContent) {\n\t\t\tthis.doScrollingBetweenPages(visit);\n\t\t}\n\t\tthis.restoreScrollContainers(visit);\n\t};\n\n\t/**\n\t * Scrolls the window\n\t * @returns {void}\n\t */\n\tdoScrollingBetweenPages = (visit) => {\n\t\t// Bail early on popstate if not animated: browser will handle it\n\t\tif (visit.history.popstate && !visit.animation.animate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Try scrolling to a given anchor\n\t\tif (this.maybeScrollToAnchor(visit.scroll.target, this.shouldAnimate('betweenPages'))) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Allow not resetting scroll position\n\t\tif (!visit.scroll.reset) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Finally, scroll to either the stored scroll position or to the very top of the page\n\t\tconst scrollPositions = this.getStoredScrollPositions(this.getCurrentCacheKey()) || {};\n\t\tconst top = scrollPositions.window?.top || 0;\n\n\t\t// Give possible JavaScript time to execute before scrolling\n\t\trequestAnimationFrame(() => this.swup.scrollTo(top, this.shouldAnimate('betweenPages')));\n\t};\n\n\t/**\n\t * Stores the current scroll positions for the URL we just came from\n\t */\n\tonBeforeReplaceContent = () => {\n\t\tthis.storeScrollPositions(this.currentCacheKey);\n\t\tthis.currentCacheKey = this.getCurrentCacheKey();\n\t};\n\n\t/**\n\t * Deletes the scroll positions for the URL a link is pointing to,\n\t * if shouldResetScrollPosition evaluates to true\n\t * @returns {void}\n\t */\n\tmaybeResetScrollPositions(visit) {\n\t\tconst { url } = visit.to;\n\t\tconst { el } = visit.trigger;\n\t\tconst shouldReset = !el || this.options.shouldResetScrollPosition(el);\n\t\tif (shouldReset) {\n\t\t\tthis.resetScrollPositions(url);\n\t\t}\n\t}\n\n\t/**\n\t * Stores the scroll positions for the current URL\n\t * @param {string} url\n\t * @returns {void}\n\t */\n\tstoreScrollPositions(url) {\n\t\t// retrieve the current scroll position for all containers\n\t\tconst containers = queryAll(this.options.scrollContainers).map((el) => ({\n\t\t\ttop: el.scrollTop,\n\t\t\tleft: el.scrollLeft\n\t\t}));\n\n\t\t// construct the final object entry, with the window scroll positions added\n\t\tthis.scrollPositionsStore[url] = {\n\t\t\twindow: { top: window.scrollY, left: window.scrollX },\n\t\t\tcontainers\n\t\t};\n\t}\n\n\t/**\n\t * Resets stored scroll positions for a given URL\n\t * @param {string} url\n\t */\n\tresetScrollPositions(url) {\n\t\tconst cacheKey = this.swup.resolveUrl(url);\n\t\tdelete this.scrollPositionsStore[cacheKey];\n\t\tthis.scrollPositionsStore[cacheKey] = null;\n\t}\n\n\t/**\n\t * Get the stored scroll positions for a given URL from the cache\n\t * @returns {(object|undefined)}\n\t */\n\tgetStoredScrollPositions(url) {\n\t\tconst cacheKey = this.swup.resolveUrl(url);\n\t\treturn this.scrollPositionsStore[cacheKey];\n\t}\n\n\t/**\n\t * Restore the scroll positions for all matching scrollContainers\n\t * @returns void\n\t */\n\trestoreScrollContainers() {\n\t\t// get the stored scroll positions from the cache\n\t\tconst scrollPositions = this.getStoredScrollPositions(this.getCurrentCacheKey()) || {};\n\t\tif (scrollPositions.containers == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// cycle through all containers on the current page and restore their scroll positions, if appropriate\n\t\tqueryAll(this.options.scrollContainers).forEach((el, index) => {\n\t\t\tconst scrollPosition = scrollPositions.containers[index];\n\t\t\tif (scrollPosition == null) return;\n\t\t\tel.scrollTop = scrollPosition.top;\n\t\t\tel.scrollLeft = scrollPosition.left;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current cache key for the scroll positions.\n\t * @returns {string}\n\t */\n\tgetCurrentCacheKey() {\n\t\treturn this.swup.resolveUrl(getCurrentUrl());\n\t}\n}\n"],"names":["SwupScrollPlugin","Plugin","constructor","options","super","this","name","requires","swup","defaults","doScrollingRightAway","animateScroll","betweenPages","samePageWithHash","samePage","scrollFriction","scrollAcceleration","getAnchorElement","offset","scrollContainers","shouldResetScrollPosition","link","hash","getOffset","element","parseInt","handleScrollToTop","scrollTo","shouldAnimate","handleScrollToAnchor","visit","maybeScrollToAnchor","onVisitStart","scroll","target","scrolledToContent","doScrollingBetweenPages","onScrollToContent","restoreScrollContainers","_scrollPositions$wind","history","popstate","animation","animate","reset","top","scrollPositions","getStoredScrollPositions","getCurrentCacheKey","window","requestAnimationFrame","onBeforeReplaceContent","storeScrollPositions","currentCacheKey","_extends","mount","hooks","create","scrl","Scrl","onStart","callSync","onEnd","onCancel","friction","acceleration","scrollPositionsStore","previousScrollRestoration","scrollRestoration","animateHistoryBrowsing","on","maybeResetScrollPositions","before","replace","unmount","context","console","warn","Element","elementTop","getBoundingClientRect","scrollY","url","to","el","trigger","resetScrollPositions","containers","queryAll","map","scrollTop","left","scrollLeft","scrollX","cacheKey","resolveUrl","forEach","index","scrollPosition","getCurrentUrl"],"mappings":"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"}