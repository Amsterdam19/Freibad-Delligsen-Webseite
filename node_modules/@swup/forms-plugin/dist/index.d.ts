import Plugin from '@swup/plugin';
import type { DelegateEvent, DelegateEventUnsubscribe } from 'swup';
declare module 'swup' {
    interface HookDefinitions {
        'form:submit': {
            el: HTMLFormElement;
            event: DelegatedSubmitEvent;
        };
        'form:submit:newtab': {
            el: HTMLFormElement;
            event: DelegatedSubmitEvent;
        };
    }
}
type DelegatedSubmitEvent = DelegateEvent<SubmitEvent, HTMLFormElement>;
type Options = {
    formSelector: string;
};
type FormInfo = {
    url: string;
    hash: string;
    method: 'GET' | 'POST';
    data: FormData;
    body: URLSearchParams | FormData;
    encoding: string;
};
export default class SwupFormsPlugin extends Plugin {
    name: string;
    requires: {
        swup: string;
    };
    defaults: Options;
    options: Options;
    specialKeys: {
        [key: string]: boolean;
    };
    formSubmitDelegate?: DelegateEventUnsubscribe;
    constructor(options?: Partial<Options>);
    mount(): void;
    unmount(): void;
    /**
     * Handles form 'submit' events during the capture phase
     */
    beforeFormSubmit(event: DelegatedSubmitEvent): void;
    /**
     * Restores the previous form target if available
     */
    restorePreviousFormTarget(form: HTMLFormElement): void;
    /**
     * Submits a form through swup
     */
    submitForm(event: DelegatedSubmitEvent): void;
    /**
     * Get information about where and how a form will submit
     */
    getFormInfo(form: HTMLFormElement): FormInfo;
    /**
     * Appends query parameters to a URL
     */
    appendQueryParams(url: string, data: FormData): string;
    /**
     * Is either command or control key down at the moment
     */
    isSpecialKeyPressed(): boolean;
    /**
     * Reset all entries in `specialKeys` to false
     */
    resetSpecialKeys(): void;
    /**
     * Adjust `specialKeys` on keyDown
     */
    onKeyDown: (event: KeyboardEvent) => void;
    /**
     * Adjust `specialKeys` on keyUp
     */
    onKeyUp: (event: KeyboardEvent) => void;
}
export {};
