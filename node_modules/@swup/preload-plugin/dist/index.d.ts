import Plugin from '@swup/plugin';
import { Handler } from 'swup';
import type { DelegateEvent, DelegateEventHandler, DelegateEventUnsubscribe, PageData } from 'swup';
declare module 'swup' {
    interface Swup {
        preload?: (url: string) => Promise<PageData>;
        preloadLinks?: () => void;
    }
    interface HookDefinitions {
        'link:hover': {
            el: HTMLAnchorElement;
            event: DelegateEvent;
        };
        'page:preload': {
            page: PageData;
        };
    }
}
export type PluginOptions = {
    throttle: number;
    preloadInitialPage: boolean;
};
export default class SwupPreloadPlugin extends Plugin {
    name: string;
    requires: {
        swup: string;
    };
    defaults: PluginOptions;
    options: PluginOptions;
    preloadPromises: Map<any, any>;
    mouseEnterDelegate?: DelegateEventUnsubscribe;
    touchStartDelegate?: DelegateEventUnsubscribe;
    constructor(options?: Partial<PluginOptions>);
    mount(): void;
    unmount(): void;
    onPageView(): void;
    onPageLoad: Handler<'page:load'>;
    deviceSupportsHover(): boolean;
    onMouseEnter: DelegateEventHandler;
    onTouchStart: DelegateEventHandler;
    preloadLink(el: HTMLAnchorElement): void;
    preload: (url: string) => Promise<PageData>;
    preloadLinks: () => void;
}
